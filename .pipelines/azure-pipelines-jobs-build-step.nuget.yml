parameters:
  - name: artifactPackages
    type: object
    default: {}

steps:
  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: 'current'
      downloadType: 'single'
      artifactName: 'src'
      downloadPath: '$(System.DefaultWorkingDirectory)'

  - ${{ each ap in parameters.ArtifactPackages }}:
    - pwsh: |
          Expand-Archive '$(System.DefaultWorkingDirectory)\src\${{ap}}.zip' '$(System.DefaultWorkingDirectory)\src' -Force
    # - task: ExtractFiles@1
    #   displayName: 'Extracting ${{ap}}.zip ..'
    #   inputs:
    #     archiveFilePatterns: '**/${{ap}}.zip'
    #     destinationFolder: '$(System.DefaultWorkingDirectory)'
    #     cleanDestinationFolder: false 
    #     overwriteExistingFiles: true

  - pwsh: |
        dotnet restore
        dotnet pack --no-build
    displayName: 'Generate NuGet Packages'
    workingDirectory: '$(System.DefaultWorkingDirectory)'

  # - task: DotNetCoreCLI@2
  #   condition: succeeded()
  #   displayName: 'Restore Dependencies'
  #   inputs:
  #     command: restore
  #     projects: |
  #       src/**/*.csproj

  # - task: DotNetCoreCLI@2
  #   condition: succeeded()
  #   displayName: 'Generate NuGet Packages'
  #   inputs:
  #     command: pack
  #     packagesToPack: src/**/*.csproj
  #     nobuild: true

  - task: PublishBuildArtifacts@1
    condition: succeeded()
    displayName: 'Store NuGet Packages - $(ArtifactPackageName)'
    inputs:
      pathtoPublish: $(Build.ArtifactStagingDirectory)
      artifactName: $(ArtifactPackageName)
      publishLocation: 'Container'