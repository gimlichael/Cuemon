steps:
  - task: DotNetCoreCLI@2
    displayName: 'Test Solution - Linux'
    condition: and(succeeded(), eq(variables['Agent.OS'], 'Linux'))
    inputs:
      command: test
      projects: test/**/*.csproj
      arguments: '--configuration $(BuildConfiguration) --verbosity quiet --collect:"XPlat Code Coverage" /p:TargetFrameworks=\"net8.0;net7.0;net6.0\" /p:CollectCoverage=true /p:CoverletOutputFormat=opencover'
      publishTestResults: true
    env:
      ConnectionStrings__AdventureWorks: $(ConnectionStrings--AdventureWorks)
      CollectCoverage: true
      CoverletOutputFormat: opencover

  - task: DotNetCoreCLI@2
    displayName: 'Test Solution - Windows'
    condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))
    inputs:
      command: test
      projects: test/**/*.csproj
      arguments: '--configuration $(BuildConfiguration) --verbosity quiet --collect:"XPlat Code Coverage" /p:CollectCoverage=true /p:CoverletOutputFormat=opencover --filter FullyQualifiedName!~SqlClient'
      publishTestResults: true
    env:
      CollectCoverage: true
      CoverletOutputFormat: opencover
  
  - script: reportgenerator "-reports:**/*.opencover.xml" "-targetdir:$(Build.SourcesDirectory)/Coverage" "-reporttypes:Cobertura;HTMLInline;HTMLChart"
    condition: and(succeeded(), eq(variables['Agent.OS'], 'Linux'))
    displayName: 'Create Code Coverage Reports'

  - task: PublishCodeCoverageResults@1
    condition: and(succeeded(), eq(variables['Agent.OS'], 'Linux'))
    displayName: 'Publish Code Coverage'
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: '$(Build.SourcesDirectory)/Coverage/Cobertura.xml'
      reportDirectory: '$(Build.SourcesDirectory)/Coverage'