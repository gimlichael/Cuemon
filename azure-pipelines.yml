trigger:
- development

variables:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  BuildSource: 'src'
  BuildPlatform: 'Any CPU'
  BuildConfiguration: 'Release'

jobs:
- job: CI
  timeoutInMinutes: 75

  strategy:
    matrix:
      Linux_Build_and_Test:
        imageName: 'ubuntu-20.04'
      Windows_Build_Test_and_Package:
        imageName: 'windows-2019'

  pool:
    vmImage: $(imageName)

  steps:
  - task: UseDotNet@2
    condition: eq(variables['Agent.OS'], 'Linux')
    displayName: 'Use .Net Core SDK 2.2.207 (SonarCloud)'
    inputs:
      version: 2.2.207

  - task: UseDotNet@2
    displayName: 'Use .Net Core SDK 3.1.401'
    inputs:
      version: 3.1.401

  - task: DotNetCoreCLI@2
    displayName: 'Install NBGV tool'
    inputs:
      command: custom
      custom: tool
      arguments: 'install --global nbgv'

  - task: DotNetCoreCLI@2
    condition: eq(variables['Agent.OS'], 'Linux')
    displayName: 'Install ReportGenerator tool'
    inputs:
      command: custom
      custom: tool
      arguments: install --global dotnet-reportgenerator-globaltool

  - script: 'nbgv cloud'
    displayName: 'Set Version using NBGV'

  - task: DownloadSecureFile@1
    displayName: 'Download cuemon.snk'
    inputs:
      secureFile: 'cuemon.snk'

  - task: CopyFiles@2
    displayName: 'Copy cuemon.snk to $(System.DefaultWorkingDirectory)'
    inputs:
      SourceFolder: '$(Agent.TempDirectory)'
      Contents: cuemon.snk
      TargetFolder: '$(System.DefaultWorkingDirectory)'

  - task: DotNetCoreCLI@2
    displayName: Restore
    inputs:
      command: restore
      projects: |
        **/*.csproj

  - task: SonarCloudPrepare@1
    condition: eq(variables['Agent.OS'], 'Linux')
    displayName: 'Prepare Analysis on SonarCloud'
    inputs:
      SonarCloud: 'Cuemon-SonarCloud'
      organization: 'geekle'
      scannerMode: 'MSBuild'
      projectKey: 'Cuemon'
      projectName: 'Cuemon'
      projectVersion: '$(GitAssemblyInformationalVersion)'
      extraProperties: |
        sonar.cs.opencover.reportsPaths=$(Build.SourcesDirectory)/**/*opencover.xml
        sonar.cs.vstest.reportsPaths=$(Agent.TempDirectory)/*.trx

  - task: DotNetCoreCLI@2
    displayName: 'Build netcoreapp3.0 compatible Assemblies'
    inputs:
      command: 'build'
      projects: |
        src/**/Cuemon.AspNetCore*.csproj
        src/**/Cuemon.Extensions.AspNetCore*.csproj
        src/**/Cuemon.Extensions.Xunit.csproj
      arguments: '--configuration $(BuildConfiguration) --no-restore --framework netcoreapp3.0'
      workingDirectory: '$(BuildSource)'

  - task: DotNetCoreCLI@2
    displayName: 'Build netstandard2.1 compatible Assemblies'
    inputs:
      command: 'build'
      projects: |
        src/**/Cuemon.Extensions.IO.csproj
        src/**/Cuemon.IO.csproj
      arguments: '--configuration $(BuildConfiguration) --no-restore --framework netstandard2.1'
      workingDirectory: '$(BuildSource)'

  - task: DotNetCoreCLI@2
    displayName: 'Build netstandard2.0 compatible Assemblies'
    inputs:
      command: 'build'
      projects: src/**/*.csproj
      arguments: '--configuration $(BuildConfiguration) --no-restore --framework netstandard2.0'
      workingDirectory: '$(BuildSource)'

  - task: DotNetCoreCLI@2
    displayName: 'Test Solution'
    inputs:
      command: 'test'
      projects: test/**/*.csproj
      arguments: '--configuration $(BuildConfiguration) --collect:"XPlat Code Coverage" /p:CollectCoverage=true /p:CoverletOutputFormat=opencover'
      publishTestResults: true

  - script: reportgenerator "-reports:**/*.opencover.xml" "-targetdir:$(Build.SourcesDirectory)/Coverage" "-reporttypes:Cobertura;HTMLInline;HTMLChart"
    condition: eq(variables['Agent.OS'], 'Linux')
    displayName: 'Create Code Coverage Reports'

  - task: PublishCodeCoverageResults@1
    condition: eq(variables['Agent.OS'], 'Linux')
    displayName: 'Publish Code Coverage'
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: '$(Build.SourcesDirectory)/Coverage/Cobertura.xml'
      reportDirectory: '$(Build.SourcesDirectory)/Coverage'

  - bash: bash <(curl -s https://codecov.io/bash)
    condition: eq(variables['Agent.OS'], 'Linux')
    displayName: 'Upload to codecov.io'

  - task: SonarCloudAnalyze@1
    condition: eq(variables['Agent.OS'], 'Linux')
    displayName: 'Run Sonar Cloud Code Analysis'

  - task: SonarCloudPublish@1
    condition: eq(variables['Agent.OS'], 'Linux')
    displayName: 'Publish Quality Gate Result to Sonar Cloud'
    inputs:
      pollingTimeoutSec: '300'

  - task: DotNetCoreCLI@2
    condition: eq(variables['Agent.OS'], 'Windows_NT')
    displayName: dotnet pack
    inputs:
      command: pack
      packagesToPack: src/**/*.csproj
      nobuild: true

  - task: PublishBuildArtifacts@1
    condition: eq(variables['Agent.OS'], 'Windows_NT')
    displayName: 'Store NuGet Packages'
    inputs:
      PathtoPublish: $(Build.ArtifactStagingDirectory)
      ArtifactName: Packages
      publishLocation: Container

  - task: NuGetCommand@2
    condition: eq(variables['Agent.OS'], 'Windows_NT')
    displayName: 'Publish NuGet Packages to https://nuget.cuemon.net/v3/index.json'
    inputs:
      command: 'push'
      packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
      nuGetFeedType: 'external'
      publishFeedCredentials: 'Cuemon-Nuget'